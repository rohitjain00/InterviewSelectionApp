{"version":3,"sources":["config.tsx","student/service.ts","student/index.tsx","interview/editInterview.tsx","interview/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["server_url","getStudents","a","fetch","then","response","json","students","Student","React","useState","name","setName","setStudents","useEffect","populateStudents","data","addNewStudent","method","headers","body","JSON","stringify","id","res","console","log","className","Paper","elevation","variant","square","TextField","label","onChange","event","target","value","Button","color","onClick","List","dense","map","item","ListItem","ListItemText","primary","EditInterview","props","startTime","setStartTime","endTime","setEndTime","interview","strpSeconds","start_time","end_time","date","substr","length","type","InputLabelProps","shrink","Autocomplete","multiple","options","getOptionLabel","student","reason","defaultValue","filterSelectedOptions","renderInput","params","placeholder","toast","success","message","catch","error","warn","allStudents","setAllStudents","interviews","setInterviews","App","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68ec637a.chunk.js","sourcesContent":["export const server_url = 'https://interview-select-api.herokuapp.com';\n","import { server_url } from '../config';\n\nexport interface Students {\n  data: StudentInterface[];\n}\n\nexport interface StudentInterface {\n  id: number;\n  name: string;\n}\n\nexport const getStudents = async (): Promise<Students> => {\n  const students: Students = await fetch(\n    server_url + '/student/'\n  ).then((response) => response.json());\n  return students;\n};\n","import React from 'react';\nimport {\n  TextField,\n  Button,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n} from '@material-ui/core';\nimport './index.css';\nimport { getStudents, StudentInterface, Students } from './service';\nimport { server_url } from '../config';\n\nconst Student = () => {\n  const [name, setName] = React.useState<string>('');\n  const [students, setStudents] = React.useState<StudentInterface[]>([]);\n\n  React.useEffect(() => {\n    populateStudents();\n  }, []);\n\n  const populateStudents = async () => {\n    getStudents().then((response: Students) => {\n      setStudents(response.data);\n    });\n  };\n  const onChangeName = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setName(event.target.value);\n  };\n\n  const addNewStudent = async () => {\n    if (name === '') {\n      return;\n    }\n    await fetch(server_url + '/student/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        id: -1,\n        name: name,\n      }),\n    }).then((res) => console.log(res));\n    await populateStudents();\n  };\n\n  return (\n    <div className=\"parent\">\n      <Paper elevation={3} variant=\"outlined\" square className=\"add-student\">\n        <TextField label=\"Name\" onChange={onChangeName} value={name} />\n        <Button variant=\"contained\" color=\"primary\" onClick={addNewStudent}>\n          Add New Student\n        </Button>\n      </Paper>\n      <Paper elevation={3} variant=\"outlined\" square>\n        <List dense={true}>\n          {students.map((item: StudentInterface) => {\n            return (\n              <ListItem key={item.id}>\n                <ListItemText primary={item.id + ' ' + item.name} />\n              </ListItem>\n            );\n          })}\n        </List>\n      </Paper>\n    </div>\n  );\n};\n\nexport default Student;\n","import { InterviewInterface } from './index';\nimport React from 'react';\nimport { TextField, Button, Paper } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { server_url } from '../config';\nimport { StudentInterface } from '../student/service';\nimport './editInterview.css';\nimport { Response } from '../types';\nimport { toast } from 'react-toastify';\n\ninterface Props {\n  interview: InterviewInterface | null;\n  students: StudentInterface[];\n}\nexport const EditInterview = (props: Props) => {\n  const [name, setName] = React.useState<string>('');\n  const [startTime, setStartTime] = React.useState<string>('');\n  const [endTime, setEndTime] = React.useState<string>('');\n  const [students, setStudents] = React.useState<StudentInterface[]>([]);\n\n  React.useEffect(() => {\n    if (props.interview !== null) {\n      setName(props.interview.name);\n      setStartTime(strpSeconds(props.interview.start_time));\n      setEndTime(strpSeconds(props.interview.end_time));\n      setStudents(props.interview.students);\n    }\n  }, [props]);\n\n  const handleNameChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setName(event.target.value);\n  };\n  const handleStartTimeChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setStartTime(event.target.value);\n  };\n  const handleEndTimeChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setEndTime(event.target.value);\n  };\n  const handleStudentChange = (\n    event: any,\n    value: StudentInterface[],\n    reason: string\n  ) => {\n    setStudents(value);\n    console.log(value);\n  };\n\n  const strpSeconds = (date: string) => {\n    return date.substr(0, date.length - 3);\n  };\n\n  const scheduleNewInterview = () => {\n    fetch(server_url + '/interview/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        name: name,\n        start_time: startTime,\n        end_time: endTime,\n        students: students.map((student) => student.id),\n      }),\n    })\n      .then((res) => res.json())\n      .then((res: Response) => {\n        toast.success(res.message);\n        console.log(res.message);\n      })\n      .catch((res: Response) => {\n        toast.error(res.message);\n        console.warn(res.message);\n      });\n  };\n\n  const updateInterview = () => {\n    if (!props.interview) {\n      return;\n    }\n    fetch(server_url + '/interview/', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        id: props.interview.id,\n        name: name,\n        start_time: startTime,\n        end_time: endTime,\n        students: students.map((student) => student.id),\n      }),\n    })\n      .then((res) => res.json())\n      .then((res: Response) => {\n        toast.success(res.message);\n        console.log(res.message);\n      })\n      .catch((res: Response) => {\n        toast.error(res.message);\n        console.warn(res.message);\n      });\n  };\n  return (\n    <Paper elevation={3} variant=\"outlined\" square className=\"interview\">\n      <form>\n        <TextField label=\"Name\" onChange={handleNameChange} value={name} />\n        <TextField\n          label=\"Start Time\"\n          type=\"datetime-local\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={startTime}\n          onChange={handleStartTimeChange}\n        />\n        <TextField\n          label=\"End Time\"\n          type=\"datetime-local\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          value={endTime}\n          onChange={handleEndTimeChange}\n        />\n        <Autocomplete\n          multiple\n          options={props.students}\n          getOptionLabel={(student) => student.name}\n          onChange={handleStudentChange}\n          defaultValue={props.interview ? [...props.interview.students] : []}\n          filterSelectedOptions\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              variant=\"standard\"\n              label=\"Students\"\n              placeholder=\"Students\"\n            />\n          )}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={props.interview ? updateInterview : scheduleNewInterview}\n        >\n          {props.interview ? 'Update' : 'Schedule'}\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n","import React from 'react';\nimport { server_url } from '../config';\nimport { StudentInterface, getStudents, Students } from '../student/service';\nimport { EditInterview } from './editInterview';\n\nexport interface InterviewInterface {\n  id: number;\n  name: string;\n  start_time: string;\n  end_time: string;\n  students: StudentInterface[];\n}\n\nconst Student = () => {\n  const [allStudents, setAllStudents] = React.useState<StudentInterface[]>([]);\n  const [interviews, setInterviews] = React.useState<InterviewInterface[]>([]);\n  React.useEffect(() => {\n    populateStudents();\n    fetch(server_url + '/interview/')\n      .then((response) => response.json())\n      .then((response: { data: InterviewInterface[] }) => {\n        setInterviews(response.data);\n      });\n  }, []);\n\n  const populateStudents = async () => {\n    getStudents().then((response: Students) => {\n      setAllStudents(response.data);\n    });\n  };\n\n  return (\n    <div>\n      <EditInterview students={allStudents} interview={null} key={1} />\n\n      {interviews.map((interview) => {\n        return (\n          <EditInterview\n            students={allStudents}\n            interview={interview}\n            key={interview.id}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Student;\n","import Student from './student';\nimport Interview from './interview';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <>\n      <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n      <Student />\n      <Interview />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}